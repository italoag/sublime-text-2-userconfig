<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>changed</key>
	<dict>
		<key>command</key>
		<string>#!/usr/bin/env ruby

require 'find'
%w[web_preview exit_codes ui textmate].each { |m| require "#{ENV['TM_SUPPORT_PATH']}/lib/#{m}" }

dir = ENV['TM_PROJECT_DIRECTORY'] || ENV['TM_DIRECTORY']
query = ENV['TM_SELECTED_TEXT']
unless query
  query = TextMate::UI.request_string( 
    :prompt =&gt; "Enter query string",
    :default =&gt; ENV['TM_CURRENT_WORD'],
    :button1 =&gt; "Search", :button2 =&gt; "Cancel")
  unless query
    TextMate.exit_discard
  end
end
filter = Regexp.new(ENV['TM_QS_FILTER']) if ENV['TM_QS_FILTER']
search_in = TextMate.selected_files
search_in = [ENV['TM_FILEPATH']] if search_in.nil? || search_in.empty?

$stdout.sync = true

html_header 'Quick Search Result', "Search for: #{query}"

puts "&lt;ol&gt;"
count = 0
stime = Time.now
Find.find(*search_in) do |f|
  short_f = f[/^#{dir}(.+)$/, 1]
  Find.prune if f =~ /(svn|CVS|jpg|gif|swf|ico|png)$/ || f=~ filter
  `grep -n '#{query}' #{e_sh f} /dev/null`.each do |found|
    next unless found =~ /:(\d+):(.+)$/
    line, code = $~.captures
    code.gsub!(/&lt;/ms, '&amp;lt;')
    code.gsub!(/&gt;/ms, '&amp;gt;')
    print '&lt;li&gt;'
    print "&lt;a href=\"txmt:\/\/open?line=%d&amp;url=file:\/\/%s\"&gt;%s:%d&lt;/a&gt;" %
      [line.to_i, e_url(f), short_f, line.to_i]
    print "&lt;div style=\"font-size: 12px; margin: 3px 30px;\"&gt;#{code}&lt;/div&gt;"
    puts '&lt;/li&gt;'
    count += 1
  end
end
puts "&lt;/ol&gt;"
etime = Time.now

if count == 0
  puts "Nothing found."
else
  puts "&lt;div style=\"margin: 10px\"&gt;Found #{count} occurrences. (#{etime - stime} sec)&lt;/div&gt;"
end

html_footer</string>
	</dict>
	<key>deleted</key>
	<array/>
	<key>isDelta</key>
	<true/>
	<key>uuid</key>
	<string>D3A59EE8-89D8-4BF2-9D05-3B42470C8601</string>
</dict>
</plist>
